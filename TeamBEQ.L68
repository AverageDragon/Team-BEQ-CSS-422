00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 5/6/2021 8:07:58 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : 68000 Disassembler (DASM)
00000000                             3  * Written by : Team BEQ
00000000                             4  *                Jonathan Hendrickson, Guiragos Guiragossian,
00000000                             5  *                Dylan Thibault, Omar Nevarez
00000000                             6  *
00000000                             7  * Class      : CSS 422 A Sp 21 with Jim Hogg
00000000                             8  * Description: A disassembler for 68k machine code.
00000000                             9  *-----------------------------------------------------------
00000000                            10  
00000000                            11  ; Declare variables here
00000000                            12  
00000000                            13  ; ========================================================================
00000000                            14  ; "main" routine
00000000                            15  ; Dylan, Gary
00000000                            16  ; 
00000000                            17  ; TODO: DESCRIPTION OF MAIN ROUTINE FUNCTIONALITY
00000000                            18  ; ========================================================================
00001000                            19          ORG     $1000
00001000                            20  
00001000                            21  
00001000  1C07                      22  main:   MOVE.B  D7, D6      ; Example instruction and comment
00001002  FFFF FFFF                 23          SIMHALT             ; halt simulator
00001006                            24          
00001006                            25          
00001006                            26  ; ========================================================================
00001006                            27  ; "identifyOpcode" subroutine
00001006                            28  ; Jonathan
00001006                            29  ; 
00001006                            30  ; Reads the Word at A2 and determines which opcode it represents.
00001006                            31  ; When the opcode is identified, the appropriate "decodeX" subroutine
00001006                            32  ; is invoked.
00001006                            33  ;
00001006                            34  ; Uses a generated Trie structure to determine where to split on which bits
00001006                            35  ; in order to efficiently identify the exact opcode
00001006                            36  ; ========================================================================
00001006                            37  identifyOpcode:
00001006  0812 000F                 38          BTST    #$F, (A2)   ; Check the 1st bit (from the left)
0000100A  6700 0006                 39          BEQ     split0      ; Split based on the first bit
0000100E  6000 0082                 40          BRA     split1
00001012                            41  
00001012                            42  split0: 
00001012  0812 000E                 43          BTST    #$E, (A2)   ; Check the 2nd bit
00001016  6700 00EC                 44          BEQ     decodeMOVE  ; MOVE follows 00+
0000101A  6000 0002                 45          BRA     split01
0000101E                            46          
0000101E                            47  split01:
0000101E  0812 000D                 48          BTST    #$D, (A2)   ; Check the 3rd bit
00001022  6700 0006                 49          BEQ     split0100   ; Code is 010, but all subcodes are 0100
00001026  6000 0046                 50          BRA     split0110   ; Code is 011, but all subcodes are 0110        
0000102A                            51  
0000102A                            52  split0100:
0000102A  0812 0008                 53          BTST    #$8, (A2)   ; Check the 8th bit for LEA
0000102E  6600 00E4                 54          BNE     decodeLEA   ; LEA follows 0100XXX1+
00001032  0812 000B                 55          BTST    #$B, (A2)   ; Check the 5th bit for NOT
00001036  6700 00E0                 56          BEQ     decodeNOT   ; NOT follows 01000+
0000103A  0812 0009                 57          BTST    #$9, (A2)   ; Check the 7th bit
0000103E  6700 0006                 58          BEQ     split01001x0
00001042  6000 0016                 59          BRA     split0100111
00001046                            60  
00001046                            61  split01001x0:
00001046  0812 0007                 62          BTST    #$7, (A2)   ; Check the 9th bit for MOVEM
0000104A  6600 00BA                 63          BNE     decodeMOVEM ; MOVEM follows 01001x001+
0000104E  0812 0006                 64          BTST    #$6, (A2)   ; Check the 10th bit
00001052  6700 00BA                 65          BEQ     decodeMULSL ; MULS.L follows 0100110000+
00001056  6000 00BA                 66          BRA     decodeDIVUL ; DIVU.L follows 0100110001+
0000105A                            67  
0000105A                            68  split0100111:
0000105A  0812 0007                 69          BTST    #$7, (A2)   ; Check the 9th bit for JSR
0000105E  6600 00C8                 70          BNE     decodeJSR   ; JSR follows 010011101+
00001062  0812 0002                 71          BTST    #$2, (A2)   ; Check the 14th bit
00001066  6700 009A                 72          BEQ     decodeNOP   ; NOP follows 01001110011100+
0000106A  6000 00BC                 73          BRA     decodeJSR   ; JSR follows 01001110011101+
0000106E                            74  
0000106E                            75  split0110:
0000106E  0812 000B                 76          BTST    #$B, (A2)   ; Check the 5th bit
00001072  6700 0006                 77          BEQ     split01100
00001076  6000 000E                 78          BRA     split01101
0000107A                            79  
0000107A                            80  split01100:
0000107A  0812 000A                 81          BTST    #$A, (A2)   ; Check the 6th bit
0000107E  6700 00AC                 82          BEQ     decodeBRA   ; BRA starts with 011000
00001082  6000 009E                 83          BRA     decodeBEQ   ; BEQ starts with 011001
00001086                            84          
00001086                            85  split01101:
00001086  0812 0008                 86          BTST    #$8, (A2)   ; Check the 8th bit
0000108A  6700 0098                 87          BEQ     decodeBGE   ; BGE starts with 01101100
0000108E  6000 0096                 88          BRA     decodeBLT   ; BLT starts with 01101101
00001092                            89          
00001092                            90  split1: 
00001092  0812 000E                 91          BTST    #$E, (A2)   ; Check the 2nd bit
00001096  6700 0006                 92          BEQ     split10
0000109A  6000 000E                 93          BRA     split11
0000109E                            94  
0000109E                            95  split10:
0000109E  0812 000C                 96          BTST    #$C, (A2)   ; Check the 4th bit
000010A2  6700 006C                 97          BEQ     decodeDIVUW ; DIVU.W follows 1000+
000010A6  6000 0062                 98          BRA     decodeSUB   ; SUB follows 1001+
000010AA                            99  
000010AA                           100  split11:
000010AA  0812 000D                101          BTST    #$D, (A2)   ; Check the 3rd bit
000010AE  6700 0006                102          BEQ     split110
000010B2  6000 0026                103          BRA     split111
000010B6                           104  
000010B6                           105  split110:
000010B6  0812 000C                106          BTST    #$C, (A2)   ; Check the 4th bit for ADD
000010BA  6600 004C                107          BNE     decodeADD   ; ADD follows 1101+
000010BE  0812 0008                108          BTST    #$8, (A2)   ; MULS.W has all 3 bits at 8, 9, and 10 set
000010C2  6700 0052                109          BEQ     decodeAND   ; If any of these BTSTs show a 0, opcode is AND
000010C6  0812 0007                110          BTST    #$7, (A2)
000010CA  6700 004A                111          BEQ     decodeAND
000010CE  0812 0006                112          BTST    #$6, (A2)
000010D2  6700 0042                113          BEQ     decodeAND
000010D6  6000 0034                114          BRA     decodeMULSW ; All 3 positions (8, 9, 10) contained 1s
000010DA                           115  
000010DA                           116  split111:
000010DA  0812 0007                117          BTST    #$7, (A2)   ; The 7th and 6th bit are set for Memory Shifts
000010DE  6700 0016                118          BEQ     regShift    ; If 7 or 6 are cleared, this is a register shift
000010E2  0812 0006                119          BTST    #$6, (A2)
000010E6  6700 000E                120          BEQ     regShift
000010EA  0812 0009                121          BTST    #$9, (A2)   ; Check 9th bit
000010EE  6700 002E                122          BEQ     decodeASx_M ; ASL_ASR Memory Shift follows 1110000x11+
000010F2  6000 0026                123          BRA     decodeLSx_M ; LSL_LSR Memory Shift follows 1110001x11+
000010F6                           124  
000010F6                           125  regShift: ; Special split specifically for ASx/LSx Register Shifts
000010F6  0812 0004                126          BTST    #$4, (A2)   ; Check the 4th bit
000010FA  6700 0024                127          BEQ     decodeASx_R ; ASL_ASR Register Shift follows 1110xxxxxxx01+
000010FE  6700 001A                128          BEQ     decodeLSx_M ; LSL_LSR Register Shift follows 1110xxxxxxx00+
00001102                           129          
00001102                           130          
00001102                           131          
00001102                           132  ; ========================================================================
00001102                           133  ; "decodeX" subroutines
00001102                           134  ; Gary, Dylan
00001102                           135  ; 
00001102                           136  ; Set of subroutines which are invoked by identifyOpcode.
00001102                           137  ; A decodeX subroutine will read from A2 and use TRAP #15 to output
00001102                           138  ; the instruction.
00001102                           139  ;
00001102                           140  ; For example, the "decodeLEA" subroutine will read A2 (which contains the
00001102                           141  ; opcode) to record the parameters (such as destination register). If the
00001102                           142  ; opcode indicates that the next word represents a destination address, then
00001102                           143  ; decodeLEA will advance A2 to the next word and decode that.
00001102                           144  ; To finish, decodeLEA will output the decoded instruction with TRAP #15
00001102                           145  ; ========================================================================
00001102                           146  ; ------------------------------------------------------------
00001102                           147  ; 1. "decodeNOP" subroutine
00001102                           148  ; AUTHOR
00001102                           149  ;
00001102                           150  ; TODO: DESCRIPTION
00001102                           151  ; ------------------------------------------------------------
00001102                           152  decodeNOP:
00001102                           153          ; Put code here
00001102  4E75                     154          RTS                 ; Return from decodeNOP subroutine
00001104                           155  
00001104                           156  
00001104                           157  ; ------------------------------------------------------------
00001104                           158  ; 2. "decodeMOVE" subroutine
00001104                           159  ; AUTHOR
00001104                           160  ;
00001104                           161  ; TODO: DESCRIPTION
00001104                           162  ; ------------------------------------------------------------
00001104                           163  decodeMOVE:
00001104                           164          ; Put code here
00001104  4E75                     165          RTS                 ; Return from decodeMOVE subroutine
00001106                           166  
00001106                           167  
00001106                           168  ; ------------------------------------------------------------
00001106                           169  ; 3. "decodeMOVEM" subroutine
00001106                           170  ; AUTHOR
00001106                           171  ;
00001106                           172  ; TODO: DESCRIPTION
00001106                           173  ; ------------------------------------------------------------
00001106                           174  decodeMOVEM:
00001106                           175          ; Put code here
00001106  4E75                     176          RTS                 ; Return from decodeMOVEM subroutine
00001108                           177  
00001108                           178  
00001108                           179  ; ------------------------------------------------------------
00001108                           180  ; 4. "decodeADD" subroutine
00001108                           181  ; AUTHOR
00001108                           182  ;
00001108                           183  ; TODO: DESCRIPTION
00001108                           184  ; ------------------------------------------------------------
00001108                           185  decodeADD:
00001108                           186          ; Put code here
00001108  4E75                     187          RTS                 ; Return from decodeADD subroutine
0000110A                           188  
0000110A                           189  
0000110A                           190  ; ------------------------------------------------------------
0000110A                           191  ; 5. "decodeSUB" subroutine
0000110A                           192  ; AUTHOR
0000110A                           193  ;
0000110A                           194  ; TODO: DESCRIPTION
0000110A                           195  ; ------------------------------------------------------------
0000110A                           196  decodeSUB:
0000110A                           197          ; Put code here
0000110A  4E75                     198          RTS                 ; Return from decodeSUB subroutine
0000110C                           199  
0000110C                           200  
0000110C                           201  ; ------------------------------------------------------------
0000110C                           202  ; 6a. "decodeMULSW" subroutine
0000110C                           203  ; AUTHOR
0000110C                           204  ;
0000110C                           205  ; TODO: DESCRIPTION MULS.W
0000110C                           206  ; ------------------------------------------------------------
0000110C                           207  decodeMULSW:
0000110C                           208          ; Put code here
0000110C  4E75                     209          RTS                 ; Return from decodeMULSW subroutine
0000110E                           210  
0000110E                           211  
0000110E                           212  ; ------------------------------------------------------------
0000110E                           213  ; 6b. "decodeMULSL" subroutine
0000110E                           214  ; AUTHOR
0000110E                           215  ;
0000110E                           216  ; TODO: DESCRIPTION MULS.L
0000110E                           217  ; ------------------------------------------------------------
0000110E                           218  decodeMULSL:
0000110E                           219          ; Put code here
0000110E  4E75                     220          RTS                 ; Return from decodeMULSL subroutine
00001110                           221          
00001110                           222          
00001110                           223  ; ------------------------------------------------------------
00001110                           224  ; 7a. "decodeDIVUW" subroutine
00001110                           225  ; AUTHOR
00001110                           226  ;
00001110                           227  ; TODO: DESCRIPTION DIVU.W
00001110                           228  ; ------------------------------------------------------------
00001110                           229  decodeDIVUW:
00001110                           230          ; Put code here
00001110  4E75                     231          RTS                 ; Return from decodeDIVUW subroutine
00001112                           232  
00001112                           233  
00001112                           234  ; ------------------------------------------------------------
00001112                           235  ; 7b. "decodeDIVUL" subroutine
00001112                           236  ; AUTHOR
00001112                           237  ;
00001112                           238  ; TODO: DESCRIPTION DIVU.L
00001112                           239  ; ------------------------------------------------------------
00001112                           240  decodeDIVUL:
00001112                           241          ; Put code here
00001112  4E75                     242          RTS                 ; Return from decodeDIVUL subroutine
00001114                           243  
00001114                           244  
00001114                           245  ; ------------------------------------------------------------
00001114                           246  ; 8. "decodeLEA" subroutine
00001114                           247  ; AUTHOR
00001114                           248  ;
00001114                           249  ; TODO: DESCRIPTION
00001114                           250  ; ------------------------------------------------------------
00001114                           251  decodeLEA:
00001114                           252          ; Put code here
00001114  4E75                     253          RTS                 ; Return from decodeLEA subroutine
00001116                           254  
00001116                           255  
00001116                           256  ; ------------------------------------------------------------
00001116                           257  ; 9. "decodeAND" subroutine
00001116                           258  ; AUTHOR
00001116                           259  ;
00001116                           260  ; TODO: DESCRIPTION
00001116                           261  ; ------------------------------------------------------------
00001116                           262  decodeAND:
00001116                           263          ; Put code here
00001116  4E75                     264          RTS                 ; Return from decodeAND subroutine
00001118                           265  
00001118                           266  
00001118                           267  ; ------------------------------------------------------------
00001118                           268  ; 10. "decodeNOT" subroutine
00001118                           269  ; AUTHOR
00001118                           270  ;
00001118                           271  ; TODO: DESCRIPTION
00001118                           272  ; ------------------------------------------------------------
00001118                           273  decodeNOT:
00001118                           274          ; Put code here
00001118  4E75                     275          RTS                 ; Return from decodeNOT subroutine
0000111A                           276  
0000111A                           277  
0000111A                           278  ; ------------------------------------------------------------
0000111A                           279  ; 11a. "decodeLSx_M" subroutine
0000111A                           280  ; AUTHOR
0000111A                           281  ;
0000111A                           282  ; TODO: DESCRIPTION - LSL or LSR Memory Shift
0000111A                           283  ; ------------------------------------------------------------
0000111A                           284  decodeLSx_M:
0000111A                           285          ; Put code here
0000111A  4E75                     286          RTS                 ; Return from decodeLSx_M subroutine
0000111C                           287  
0000111C                           288  
0000111C                           289  ; ------------------------------------------------------------
0000111C                           290  ; 11b. "decodeLSx_R" subroutine
0000111C                           291  ; AUTHOR
0000111C                           292  ;
0000111C                           293  ; TODO: DESCRIPTION - LSL or LSR Register Shift
0000111C                           294  ; ------------------------------------------------------------
0000111C                           295  decodeLSx_R:
0000111C                           296          ; Put code here
0000111C  4E75                     297          RTS                 ; Return from ddecodeLSx_R subroutine
0000111E                           298  
0000111E                           299  
0000111E                           300  ; ------------------------------------------------------------
0000111E                           301  ; 12a. "decodeASx_M" subroutine
0000111E                           302  ; AUTHOR
0000111E                           303  ;
0000111E                           304  ; TODO: DESCRIPTION - ASL or ASR Memory Shift
0000111E                           305  ; ------------------------------------------------------------
0000111E                           306  decodeASx_M:
0000111E                           307          ; Put code here
0000111E  4E75                     308          RTS                 ; Return from decodeASx_M subroutine
00001120                           309  
00001120                           310  
00001120                           311  ; ------------------------------------------------------------
00001120                           312  ; 12b. "decodeASx_R" subroutine
00001120                           313  ; AUTHOR
00001120                           314  ;
00001120                           315  ; TODO: DESCRIPTION - ASL or ASR Register Shift
00001120                           316  ; ------------------------------------------------------------
00001120                           317  decodeASx_R:
00001120                           318          ; Put code here
00001120  4E75                     319          RTS                 ; Return from decodeASx_R subroutine
00001122                           320  
00001122                           321  
00001122                           322  ; ------------------------------------------------------------
00001122                           323  ; 13a. "decodeBEQ" subroutine
00001122                           324  ; AUTHOR
00001122                           325  ;
00001122                           326  ; TODO: DESCRIPTION
00001122                           327  ; ------------------------------------------------------------
00001122                           328  decodeBEQ:
00001122                           329          ; Put code here
00001122  4E75                     330          RTS                 ; Return from decodeBEQ subroutine
00001124                           331  
00001124                           332  
00001124                           333  ; ------------------------------------------------------------
00001124                           334  ; 13b. "decodeBGE" subroutine
00001124                           335  ; AUTHOR
00001124                           336  ;
00001124                           337  ; TODO: DESCRIPTION
00001124                           338  ; ------------------------------------------------------------
00001124                           339  decodeBGE:
00001124                           340          ; Put code here
00001124  4E75                     341          RTS                 ; Return from decodeBGE subroutine
00001126                           342  
00001126                           343  
00001126                           344  ; ------------------------------------------------------------
00001126                           345  ; 13c. "decodeBLT" subroutine
00001126                           346  ; AUTHOR
00001126                           347  ;
00001126                           348  ; TODO: DESCRIPTION
00001126                           349  ; ------------------------------------------------------------
00001126                           350  decodeBLT:
00001126                           351          ; Put code here
00001126  4E75                     352          RTS                 ; Return from decodeBLT subroutine
00001128                           353  
00001128                           354  
00001128                           355  ; ------------------------------------------------------------
00001128                           356  ; 14. "decodeJSR" subroutine
00001128                           357  ; AUTHOR
00001128                           358  ;
00001128                           359  ; TODO: DESCRIPTION
00001128                           360  ; ------------------------------------------------------------
00001128                           361  decodeJSR:
00001128                           362          ; Put code here
00001128  4E75                     363          RTS                 ; Return from decodeJSR subroutine
0000112A                           364  
0000112A                           365  
0000112A                           366  ; ------------------------------------------------------------
0000112A                           367  ; 15. "decodeRTS" subroutine
0000112A                           368  ; AUTHOR
0000112A                           369  ;
0000112A                           370  ; TODO: DESCRIPTION
0000112A                           371  ; ------------------------------------------------------------
0000112A                           372  decodeRTS:
0000112A                           373          ; Put code here
0000112A  4E75                     374          RTS                 ; Return from decodeRTS subroutine
0000112C                           375  
0000112C                           376  
0000112C                           377  ; ------------------------------------------------------------
0000112C                           378  ; 16. "decodeBRA" subroutine
0000112C                           379  ; AUTHOR
0000112C                           380  ;
0000112C                           381  ; TODO: DESCRIPTION
0000112C                           382  ; ------------------------------------------------------------
0000112C                           383  decodeBRA:
0000112C                           384          ; Put code here
0000112C  4E75                     385          RTS                 ; Return from decodeBRA subroutine
0000112E                           386  
0000112E                           387  
0000112E                           388  ; ========================================================================
0000112E                           389  ; Generic Helper Functions
0000112E                           390  ; 
0000112E                           391  ; Set of subroutines which do various tasks which are repeated frequently.
0000112E                           392  ; Each helper function should be commented with required input and output.
0000112E                           393  ; 
0000112E                           394  ; If input is required, request through D0, D1, etc
0000112E                           395  ; Return using D0
0000112E                           396  ; ========================================================================
0000112E                           397  ; ------------------------------------------------------------
0000112E                           398  ; example helper function
0000112E                           399  ; NAMEHERE
0000112E                           400  ;
0000112E                           401  ; Example of what a helper function might look like
0000112E                           402  ; ------------------------------------------------------------
0000112E                           403  exampleHelp:
0000112E                           404          ; Put code here
0000112E  4E75                     405          RTS                 ; Return from decodeBRA subroutine
00001130                           406  
00001130                           407  
00001130                           408          END    main         ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
DECODEADD           1108
DECODEAND           1116
DECODEASX_M         111E
DECODEASX_R         1120
DECODEBEQ           1122
DECODEBGE           1124
DECODEBLT           1126
DECODEBRA           112C
DECODEDIVUL         1112
DECODEDIVUW         1110
DECODEJSR           1128
DECODELEA           1114
DECODELSX_M         111A
DECODELSX_R         111C
DECODEMOVE          1104
DECODEMOVEM         1106
DECODEMULSL         110E
DECODEMULSW         110C
DECODENOP           1102
DECODENOT           1118
DECODERTS           112A
DECODESUB           110A
EXAMPLEHELP         112E
IDENTIFYOPCODE      1006
MAIN                1000
REGSHIFT            10F6
SPLIT0              1012
SPLIT01             101E
SPLIT0100           102A
SPLIT0100111        105A
SPLIT01001X0        1046
SPLIT0110           106E
SPLIT01100          107A
SPLIT01101          1086
SPLIT1              1092
SPLIT10             109E
SPLIT11             10AA
SPLIT110            10B6
SPLIT111            10DA
