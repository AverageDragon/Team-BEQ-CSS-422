00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 5/10/2021 6:27:31 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : 68000 Disassembler (DASM)
00000000                             3  * Written by : Team BEQ
00000000                             4  *                Jonathan Hendrickson, Guiragos Guiragossian,
00000000                             5  *                Dylan Thibault, Omar Nevarez
00000000                             6  *
00000000                             7  * Class      : CSS 422 A Sp 21 with Jim Hogg
00000000                             8  * Description: A disassembler for 68k machine code.
00000000                             9  *-----------------------------------------------------------
00000000                            10  
00000000                            11  ; ========================================================================
00000000                            12  ; Variables
00000000                            13  ; ========================================================================
00000000                            14  
00000000                            15  ; ------------------------------------------------------------
00000000                            16  ; "Pattern" Variables
00000000                            17  ; Jonathan
00000000                            18  ; 
00000000                            19  ; Set of strings to be used with verifyOpcode to check that the patterns match
00000000                            20  ; and the opcode isn't actually data
00000000                            21  ; ------------------------------------------------------------
00000000= 30 31 30 30 31 31 ...     22  pNOP:   DC.B    '0100111001110001',0
00000011= 30 30 2E 2E 2E 2E ...     23  pMOVE:  DC.B    '00..............',0
00000022= 30 31 30 30 31 2E ...     24  pMOVEM: DC.B    '01001.001.......',0
00000033= 31 31 30 31 2E 2E ...     25  pADD:   DC.B    '1101............',0
00000044= 31 30 30 31 2E 2E ...     26  pSUB:   DC.B    '1001............',0
00000055= 31 31 30 30 2E 2E ...     27  pMULS:  DC.B    '1100...111......',0
00000066= 31 30 30 30 2E 2E ...     28  pDIVU:  DC.B    '1000...011......',0
00000077= 30 31 30 30 2E 2E ...     29  pLEA:   DC.B    '0100...111......',0
00000088= 31 31 30 30 2E 2E ...     30  pAND:   DC.B    '1100............',0
00000099= 30 31 30 30 30 31 ...     31  pNOT:   DC.B    '01000110........',0
000000AA= 31 31 31 30 30 30 ...     32  pLSx_M: DC.B    '1110001.11......',0
000000BB= 31 31 31 30 2E 2E ...     33  pLSx_R: DC.B    '1110.......01...',0
000000CC= 31 31 31 30 30 30 ...     34  pASx_M: DC.B    '1110000.11......',0
000000DD= 31 31 31 30 2E 2E ...     35  pASx_R: DC.B    '1110.......00...',0
000000EE= 30 31 31 30 30 31 ...     36  pBEQ:   DC.B    '01100111........',0
000000FF= 30 31 31 30 31 31 ...     37  pBGE:   DC.B    '01101100........',0
00000110= 30 31 31 30 31 31 ...     38  pBLT:   DC.B    '01101101........',0
00000121= 30 31 30 30 31 31 ...     39  pJSR:   DC.B    '0100111010......',0
00000132= 30 31 30 30 31 31 ...     40  pRTS:   DC.B    '0100111001110101',0
00000143= 30 31 31 30 30 30 ...     41  pBRA:   DC.B    '01100000........',0
00000154                            42  
00000154                            43  
00000154                            44  ; ========================================================================
00000154                            45  ; Macros
00000154                            46  ; ========================================================================
00000154                            47  
00000154                            48  ; ------------------------------------------------------------
00000154                            49  ; "verifyOpcode" Helper
00000154                            50  ; Jonathan
00000154                            51  ;
00000154                            52  ; 1st argument is a template string (e.g. "0100...111......" for LEA)
00000154                            53  ; 2nd argument is a data register to check against the template
00000154                            54  ;
00000154                            55  ; Verifies that the opcode passed through \2 matches the pattern of \1
00000154                            56  ; If they do not match, branches to outputData
00000154                            57  ; ------------------------------------------------------------
00000154                            58  verifyOpcode:  MACRO
00000154                            59          LEA     \1, A1      ; Input pattern string
00000154                            60          MOVE.W  \2, D0      ; input value
00000154                            61          MOVE.B  #15, D1     ; Counter tracking the bit position of D0
00000154                            62          
00000154                            63  loop\@: 
00000154                            64          CMP.B   #$30, (A1)  ; Check if the template wants a 0
00000154                            65          BEQ     checkFor0\@
00000154                            66          CMP.B   #$31, (A1)  ; Check if the template wants a 1
00000154                            67          BEQ     checkFor1\@
00000154                            68          BRA     next\@      ; Template has a wildcard, go to next iteration
00000154                            69          
00000154                            70  checkFor0\@: 
00000154                            71          BTST    D1, D0      ; Check if contains 0
00000154                            72          BNE     outputData  ; Missing a 0 -> Not a valid opcode
00000154                            73          BRA     next\@
00000154                            74  
00000154                            75  checkFor1\@:
00000154                            76          BTST    D1, D0      ; Check if contains 1
00000154                            77          BEQ     outputData  ; Missing a 1 -> Not a valid opcode
00000154                            78  
00000154                            79  next\@: 
00000154                            80          CMP.B   #0, D1      ; Compare bit counter to 0
00000154                            81          BEQ     complete\@  ; Branch to complete if bit counter reached 0
00000154                            82          SUB.B   #1, D1      ; Continuing loop -> Decrement bit counter
00000154                            83          MOVE.B  (A1)+, D3   ; Move A1 to the next pointer (D3 irrelevant)
00000154                            84          BRA     loop\@      ; Begin loop again
00000154                            85  
00000154                            86  complete\@:  ; Opcode has been verified
00000154                            87          ENDM
00000154                            88  
00000154                            89  
00000154                            90  
00000154                            91  
00000154                            92  
00000154                            93  
00000154                            94  ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
00000154                            95  ; "main" routine
00000154                            96  ; Dylan, Gary
00000154                            97  ; 
00000154                            98  ; TODO: DESCRIPTION OF MAIN ROUTINE FUNCTIONALITY
00000154                            99  ; ========================================================================
00001000                           100          ORG     $1000
00001000                           101  
00001000                           102  
00001000  45F8 6000                103  main:   LEA     $6000, A2      ; Testing identifyOpcode
00001004  34BC 4BF8                104          MOVE.W  #$4BF8, (A2)
00001008  4EB9 00001012            105          JSR     identifyOpcode
0000100E                           106          
0000100E  FFFF FFFF                107          SIMHALT             ; halt simulator
00001012                           108          
00001012                           109          
00001012                           110  ; ========================================================================
00001012                           111  ; "identifyOpcode" subroutine
00001012                           112  ; Jonathan
00001012                           113  ; 
00001012                           114  ; Reads the Word at A2 and determines which opcode it represents.
00001012                           115  ; When the opcode is identified, the appropriate "decodeX" subroutine
00001012                           116  ; is invoked.
00001012                           117  ;
00001012                           118  ; Uses a generated Trie structure to determine where to split on which bits
00001012                           119  ; in order to efficiently identify the exact opcode
00001012                           120  ; ========================================================================
00001012                           121  identifyOpcode:
00001012  3012                     122          MOVE.W  (A2), D0    ; Move the value at A2 into D0 for bit testing
00001014  0800 000F                123          BTST    #$F, D0     ; Check the 1st bit (from the left)
00001018  6700 0006                124          BEQ     split0      ; Split based on the first bit
0000101C  6000 006E                125          BRA     split1
00001020                           126  
00001020                           127  split0: 
00001020  0800 000E                128          BTST    #$E, D0     ; Check the 2nd bit
00001024  6700 0114                129          BEQ     decodeMOVE  ; MOVE follows 00+
00001028  6000 0002                130          BRA     split01
0000102C                           131          
0000102C                           132  split01:
0000102C  0800 000D                133          BTST    #$D, D0     ; Check the 3rd bit
00001030  6700 0006                134          BEQ     split0100   ; Code is 010, but all subcodes are 0100
00001034  6000 0032                135          BRA     split0110   ; Code is 011, but all subcodes are 0110        
00001038                           136  
00001038                           137  split0100:
00001038  0800 0008                138          BTST    #$8, D0     ; Check the 8th bit for LEA
0000103C  6600 0270                139          BNE     decodeLEA   ; LEA follows 0100XXX1+
00001040  0800 000B                140          BTST    #$B, D0     ; Check the 5th bit for NOT
00001044  6700 02E4                141          BEQ     decodeNOT   ; NOT follows 01000+
00001048  0800 0009                142          BTST    #$9, D0     ; Check the 7th bit
0000104C  6700 012A                143          BEQ     decodeMOVEM ; MOVEM follows 01001x0+
00001050  6000 0002                144          BRA     split0100111
00001054                           145  
00001054                           146  split0100111:
00001054  0800 0007                147          BTST    #$7, D0     ; Check the 9th bit for JSR
00001058  6600 04C0                148          BNE     decodeJSR   ; JSR follows 010011101+
0000105C  0800 0002                149          BTST    #$2, D0     ; Check the 14th bit
00001060  6700 009A                150          BEQ     decodeNOP   ; NOP follows 01001110011100+
00001064  6000 04F2                151          BRA     decodeRTS   ; RTS follows 01001110011101+
00001068                           152  
00001068                           153  split0110:
00001068  0800 000B                154          BTST    #$B, D0     ; Check the 5th bit
0000106C  6700 0006                155          BEQ     split01100
00001070  6000 000E                156          BRA     split01101
00001074                           157  
00001074                           158  split01100:
00001074  0800 000A                159          BTST    #$A, D0     ; Check the 6th bit
00001078  6700 051C                160          BEQ     decodeBRA   ; BRA starts with 011000
0000107C  6000 03E2                161          BRA     decodeBEQ   ; BEQ starts with 011001
00001080                           162          
00001080                           163  split01101:
00001080  0800 0008                164          BTST    #$8, D0     ; Check the 8th bit
00001084  6700 0418                165          BEQ     decodeBGE   ; BGE starts with 01101100
00001088  6000 0452                166          BRA     decodeBLT   ; BLT starts with 01101101
0000108C                           167          
0000108C                           168  split1: 
0000108C  0800 000E                169          BTST    #$E, D0     ; Check the 2nd bit
00001090  6700 0006                170          BEQ     split10
00001094  6000 000E                171          BRA     split11
00001098                           172  
00001098                           173  split10:
00001098  0800 000C                174          BTST    #$C, D0     ; Check the 4th bit
0000109C  6700 01D2                175          BEQ     decodeDIVU  ; DIVU follows 1000+
000010A0  6000 0152                176          BRA     decodeSUB   ; SUB follows 1001+
000010A4                           177  
000010A4                           178  split11:
000010A4  0800 000D                179          BTST    #$D, D0     ; Check the 3rd bit
000010A8  6700 0006                180          BEQ     split110
000010AC  6000 0026                181          BRA     split111
000010B0                           182  
000010B0                           183  split110:
000010B0  0800 000C                184          BTST    #$C, D0     ; Check the 4th bit for ADD
000010B4  6600 0100                185          BNE     decodeADD   ; ADD follows 1101+
000010B8  0800 0008                186          BTST    #$8, D0     ; MULS.W has all 3 bits at 8, 9, and 10 set
000010BC  6700 022E                187          BEQ     decodeAND   ; If any of these BTSTs show a 0, opcode is AND
000010C0  0800 0007                188          BTST    #$7, D0
000010C4  6700 0226                189          BEQ     decodeAND
000010C8  0800 0006                190          BTST    #$6, D0
000010CC  6700 021E                191          BEQ     decodeAND
000010D0  6000 0160                192          BRA     decodeMULS  ; All 3 positions (8, 9, 10) were set
000010D4                           193  
000010D4                           194  split111:
000010D4  0800 0007                195          BTST    #$7, D0     ; The 9th and 10th bit are set for Memory Shifts
000010D8  6700 0016                196          BEQ     regShift    ; If 9 or 10 are cleared, this is a register shift
000010DC  0800 0006                197          BTST    #$6, D0
000010E0  6700 000E                198          BEQ     regShift
000010E4  0800 0009                199          BTST    #$9, D0     ; Check 7th bit
000010E8  6700 02FA                200          BEQ     decodeASx_M ; ASL_ASR Memory Shift follows 1110000x11+
000010EC  6000 027A                201          BRA     decodeLSx_M ; LSL_LSR Memory Shift follows 1110001x11+
000010F0                           202  
000010F0                           203  regShift: ; Special split specifically for ASx/LSx Register Shifts
000010F0  0800 0004                204          BTST    #$4, D0     ; Check the 12th bit
000010F4  6700 032C                205          BEQ     decodeASx_R ; ASL_ASR Register Shift follows 1110xxxxxxx01+
000010F8  6700 026E                206          BEQ     decodeLSx_M ; LSL_LSR Register Shift follows 1110xxxxxxx00+
000010FC                           207  
000010FC                           208  
000010FC                           209  
000010FC                           210  
000010FC                           211  ; ========================================================================
000010FC                           212  ; "decodeX" subroutines
000010FC                           213  ; Gary, Dylan
000010FC                           214  ; 
000010FC                           215  ; Set of subroutines which are invoked by identifyOpcode.
000010FC                           216  ; A decodeX subroutine will read from A2 and use TRAP #15 to output
000010FC                           217  ; the instruction.
000010FC                           218  ;
000010FC                           219  ; For example, the "decodeLEA" subroutine will read A2 (which contains the
000010FC                           220  ; opcode) to record the parameters (such as destination register). If the
000010FC                           221  ; opcode indicates that the next word represents a destination address, then
000010FC                           222  ; decodeLEA will advance A2 to the next word and decode that.
000010FC                           223  ; To finish, decodeLEA will output the decoded instruction with TRAP #15
000010FC                           224  ; ========================================================================
000010FC                           225  
000010FC                           226  ; ------------------------------------------------------------
000010FC                           227  ; 1. "decodeNOP" subroutine
000010FC                           228  ; AUTHOR
000010FC                           229  ;
000010FC                           230  ; TODO: DESCRIPTION
000010FC                           231  ; ------------------------------------------------------------
000010FC                           232  decodeNOP:
000010FC                           233m         verifyOpcode    pNOP, (A2)
00001138                           234          ; put code here
00001138  4E75                     235          RTS                 ; Return from decodeNOP subroutine
0000113A                           236  
0000113A                           237  
0000113A                           238  ; ------------------------------------------------------------
0000113A                           239  ; 2. "decodeMOVE" subroutine
0000113A                           240  ; AUTHOR
0000113A                           241  ;
0000113A                           242  ; TODO: DESCRIPTION
0000113A                           243  ; ------------------------------------------------------------
0000113A                           244  decodeMOVE:
0000113A                           245m         verifyOpcode    pMOVE, (A2)
00001176                           246          ; put code here
00001176  4E75                     247          RTS                 ; Return from decodeMOVE subroutine
00001178                           248  
00001178                           249  
00001178                           250  ; ------------------------------------------------------------
00001178                           251  ; 3. "decodeMOVEM" subroutine
00001178                           252  ; AUTHOR
00001178                           253  ;
00001178                           254  ; TODO: DESCRIPTION
00001178                           255  ; ------------------------------------------------------------
00001178                           256  decodeMOVEM:
00001178                           257m         verifyOpcode    pMOVEM, (A2)
000011B4                           258          ; put code here
000011B4  4E75                     259          RTS                 ; Return from decodeMOVEM subroutine
000011B6                           260  
000011B6                           261  
000011B6                           262  ; ------------------------------------------------------------
000011B6                           263  ; 4. "decodeADD" subroutine
000011B6                           264  ; AUTHOR
000011B6                           265  ;
000011B6                           266  ; TODO: DESCRIPTION
000011B6                           267  ; ------------------------------------------------------------
000011B6                           268  decodeADD:
000011B6                           269m         verifyOpcode    pADD, (A2)
000011F2                           270          ; put code here
000011F2  4E75                     271          RTS                 ; Return from decodeADD subroutine
000011F4                           272  
000011F4                           273  
000011F4                           274  ; ------------------------------------------------------------
000011F4                           275  ; 5. "decodeSUB" subroutine
000011F4                           276  ; AUTHOR
000011F4                           277  ;
000011F4                           278  ; TODO: DESCRIPTION
000011F4                           279  ; ------------------------------------------------------------
000011F4                           280  decodeSUB:
000011F4                           281m         verifyOpcode    pSUB, (A2)
00001230                           282          ; put code here
00001230  4E75                     283          RTS                 ; Return from decodeSUB subroutine
00001232                           284  
00001232                           285  
00001232                           286  ; ------------------------------------------------------------
00001232                           287  ; 6. "decodeMULS" subroutine
00001232                           288  ; AUTHOR
00001232                           289  ;
00001232                           290  ; TODO: DESCRIPTION MULS
00001232                           291  ; ------------------------------------------------------------
00001232                           292  decodeMULS:
00001232                           293m         verifyOpcode    pMULS, (A2)
0000126E                           294          ; put code here
0000126E  4E75                     295          RTS                 ; Return from decodeMULS subroutine
00001270                           296          
00001270                           297          
00001270                           298  ; ------------------------------------------------------------
00001270                           299  ; 7. "decodeDIVU" subroutine
00001270                           300  ; AUTHOR
00001270                           301  ;
00001270                           302  ; TODO: DESCRIPTION DIVU
00001270                           303  ; ------------------------------------------------------------
00001270                           304  decodeDIVU:
00001270                           305m         verifyOpcode    pDIVU, (A2)
000012AC                           306          ; put code here
000012AC  4E75                     307          RTS                 ; Return from decodeDIVU subroutine
000012AE                           308  
000012AE                           309  
000012AE                           310  ; ------------------------------------------------------------
000012AE                           311  ; 8. "decodeLEA" subroutine
000012AE                           312  ; AUTHOR
000012AE                           313  ;
000012AE                           314  ; TODO: DESCRIPTION
000012AE                           315  ; ------------------------------------------------------------
000012AE                           316  decodeLEA:
000012AE                           317m         verifyOpcode    pLEA, (A2)
000012EA                           318          ; put code here
000012EA  4E75                     319          RTS                 ; Return from decodeLEA subroutine
000012EC                           320  
000012EC                           321  
000012EC                           322  ; ------------------------------------------------------------
000012EC                           323  ; 9. "decodeAND" subroutine
000012EC                           324  ; AUTHOR
000012EC                           325  ;
000012EC                           326  ; TODO: DESCRIPTION
000012EC                           327  ; ------------------------------------------------------------
000012EC                           328  decodeAND:
000012EC                           329m         verifyOpcode    pAND, (A2)
00001328                           330          ; put code here
00001328  4E75                     331          RTS                 ; Return from decodeAND subroutine
0000132A                           332  
0000132A                           333  
0000132A                           334  ; ------------------------------------------------------------
0000132A                           335  ; 10. "decodeNOT" subroutine
0000132A                           336  ; AUTHOR
0000132A                           337  ;
0000132A                           338  ; TODO: DESCRIPTION
0000132A                           339  ; ------------------------------------------------------------
0000132A                           340  decodeNOT:
0000132A                           341m         verifyOpcode    pNOT, (A2)
00001366                           342          ; put code here
00001366  4E75                     343          RTS                 ; Return from decodeNOT subroutine
00001368                           344  
00001368                           345  
00001368                           346  ; ------------------------------------------------------------
00001368                           347  ; 11a. "decodeLSx_M" subroutine
00001368                           348  ; AUTHOR
00001368                           349  ;
00001368                           350  ; TODO: DESCRIPTION - LSL or LSR Memory Shift
00001368                           351  ; ------------------------------------------------------------
00001368                           352  decodeLSx_M:
00001368                           353m         verifyOpcode    pLSx_M, (A2)
000013A4                           354          ; put code here
000013A4  4E75                     355          RTS                 ; Return from decodeLSx_M subroutine
000013A6                           356  
000013A6                           357  
000013A6                           358  ; ------------------------------------------------------------
000013A6                           359  ; 11b. "decodeLSx_R" subroutine
000013A6                           360  ; AUTHOR
000013A6                           361  ;
000013A6                           362  ; TODO: DESCRIPTION - LSL or LSR Register Shift
000013A6                           363  ; ------------------------------------------------------------
000013A6                           364  decodeLSx_R:
000013A6                           365m         verifyOpcode    pLSx_R, (A2)
000013E2                           366          ; put code here
000013E2  4E75                     367          RTS                 ; Return from ddecodeLSx_R subroutine
000013E4                           368  
000013E4                           369  
000013E4                           370  ; ------------------------------------------------------------
000013E4                           371  ; 12a. "decodeASx_M" subroutine
000013E4                           372  ; AUTHOR
000013E4                           373  ;
000013E4                           374  ; TODO: DESCRIPTION - ASL or ASR Memory Shift
000013E4                           375  ; ------------------------------------------------------------
000013E4                           376  decodeASx_M:
000013E4                           377m         verifyOpcode    pASx_M, (A2)
00001420                           378          ; put code here
00001420  4E75                     379          RTS                 ; Return from decodeASx_M subroutine
00001422                           380  
00001422                           381  
00001422                           382  ; ------------------------------------------------------------
00001422                           383  ; 12b. "decodeASx_R" subroutine
00001422                           384  ; AUTHOR
00001422                           385  ;
00001422                           386  ; TODO: DESCRIPTION - ASL or ASR Register Shift
00001422                           387  ; ------------------------------------------------------------
00001422                           388  decodeASx_R:
00001422                           389m         verifyOpcode    pASx_R, (A2)
0000145E                           390          ; put code here
0000145E  4E75                     391          RTS                 ; Return from decodeASx_R subroutine
00001460                           392  
00001460                           393  
00001460                           394  ; ------------------------------------------------------------
00001460                           395  ; 13a. "decodeBEQ" subroutine
00001460                           396  ; AUTHOR
00001460                           397  ;
00001460                           398  ; TODO: DESCRIPTION
00001460                           399  ; ------------------------------------------------------------
00001460                           400  decodeBEQ:
00001460                           401m         verifyOpcode    pBEQ, (A2)
0000149C                           402          ; put code here
0000149C  4E75                     403          RTS                 ; Return from decodeBEQ subroutine
0000149E                           404  
0000149E                           405  
0000149E                           406  ; ------------------------------------------------------------
0000149E                           407  ; 13b. "decodeBGE" subroutine
0000149E                           408  ; AUTHOR
0000149E                           409  ;
0000149E                           410  ; TODO: DESCRIPTION
0000149E                           411  ; ------------------------------------------------------------
0000149E                           412  decodeBGE:
0000149E                           413m         verifyOpcode    pBGE, (A2)
000014DA                           414          ; put code here
000014DA  4E75                     415          RTS                 ; Return from decodeBGE subroutine
000014DC                           416  
000014DC                           417  
000014DC                           418  ; ------------------------------------------------------------
000014DC                           419  ; 13c. "decodeBLT" subroutine
000014DC                           420  ; AUTHOR
000014DC                           421  ;
000014DC                           422  ; TODO: DESCRIPTION
000014DC                           423  ; ------------------------------------------------------------
000014DC                           424  decodeBLT:
000014DC                           425m         verifyOpcode    pBLT, (A2)
00001518                           426          ; put code here
00001518  4E75                     427          RTS                 ; Return from decodeBLT subroutine
0000151A                           428  
0000151A                           429  
0000151A                           430  ; ------------------------------------------------------------
0000151A                           431  ; 14. "decodeJSR" subroutine
0000151A                           432  ; AUTHOR
0000151A                           433  ;
0000151A                           434  ; TODO: DESCRIPTION
0000151A                           435  ; ------------------------------------------------------------
0000151A                           436  decodeJSR:
0000151A                           437m         verifyOpcode    pJSR, (A2)
00001556                           438          ; put code here
00001556  4E75                     439          RTS                 ; Return from decodeJSR subroutine
00001558                           440  
00001558                           441  
00001558                           442  ; ------------------------------------------------------------
00001558                           443  ; 15. "decodeRTS" subroutine
00001558                           444  ; AUTHOR
00001558                           445  ;
00001558                           446  ; TODO: DESCRIPTION
00001558                           447  ; ------------------------------------------------------------
00001558                           448  decodeRTS:
00001558                           449m         verifyOpcode    pRTS, (A2)
00001594                           450          ; put code here
00001594  4E75                     451          RTS                 ; Return from decodeRTS subroutine
00001596                           452  
00001596                           453  
00001596                           454  ; ------------------------------------------------------------
00001596                           455  ; 16. "decodeBRA" subroutine
00001596                           456  ; AUTHOR
00001596                           457  ;
00001596                           458  ; TODO: DESCRIPTION
00001596                           459  ; ------------------------------------------------------------
00001596                           460  decodeBRA:
00001596                           461m         verifyOpcode    pBRA, (A2)
000015D2                           462          ; put code here
000015D2  4E75                     463          RTS                 ; Return from decodeBRA subroutine
000015D4                           464  
000015D4                           465  
000015D4                           466  
000015D4                           467  
000015D4                           468  ; ========================================================================
000015D4                           469  ; Generic Helper Functions
000015D4                           470  ; 
000015D4                           471  ; Set of subroutines which do various tasks which are repeated frequently.
000015D4                           472  ; Each helper function should be commented with required input and output.
000015D4                           473  ; 
000015D4                           474  ; If input is required, request through D0, D1, etc
000015D4                           475  ; Return using D0
000015D4                           476  ; ========================================================================
000015D4                           477  
000015D4                           478  ; ------------------------------------------------------------
000015D4                           479  ; outputData
000015D4                           480  ; Jonathan
000015D4                           481  ;
000015D4                           482  ; When an invalid opcode is found, outputs it as data
000015D4                           483  ; ------------------------------------------------------------
000015D4                           484  outputData:
000015D4                           485          ; Put code here
000015D4  4E75                     486          RTS                 ; Return from decodeBRA subroutine
000015D6                           487  
000015D6                           488  
000015D6                           489  
000015D6                           490  
000015D6                           491  
000015D6                           492  ; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
000015D6                           493                              ; End of Code
000015D6                           494          END    main         ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CHECKFOR0_1         111A
CHECKFOR0_10        1348
CHECKFOR0_11        1386
CHECKFOR0_12        13C4
CHECKFOR0_13        1402
CHECKFOR0_14        1440
CHECKFOR0_15        147E
CHECKFOR0_16        14BC
CHECKFOR0_17        14FA
CHECKFOR0_18        1538
CHECKFOR0_19        1576
CHECKFOR0_2         1158
CHECKFOR0_20        15B4
CHECKFOR0_3         1196
CHECKFOR0_4         11D4
CHECKFOR0_5         1212
CHECKFOR0_6         1250
CHECKFOR0_7         128E
CHECKFOR0_8         12CC
CHECKFOR0_9         130A
CHECKFOR1_1         1124
CHECKFOR1_10        1352
CHECKFOR1_11        1390
CHECKFOR1_12        13CE
CHECKFOR1_13        140C
CHECKFOR1_14        144A
CHECKFOR1_15        1488
CHECKFOR1_16        14C6
CHECKFOR1_17        1504
CHECKFOR1_18        1542
CHECKFOR1_19        1580
CHECKFOR1_2         1162
CHECKFOR1_20        15BE
CHECKFOR1_3         11A0
CHECKFOR1_4         11DE
CHECKFOR1_5         121C
CHECKFOR1_6         125A
CHECKFOR1_7         1298
CHECKFOR1_8         12D6
CHECKFOR1_9         1314
COMPLETE_1          1138
COMPLETE_10         1366
COMPLETE_11         13A4
COMPLETE_12         13E2
COMPLETE_13         1420
COMPLETE_14         145E
COMPLETE_15         149C
COMPLETE_16         14DA
COMPLETE_17         1518
COMPLETE_18         1556
COMPLETE_19         1594
COMPLETE_2          1176
COMPLETE_20         15D2
COMPLETE_3          11B4
COMPLETE_4          11F2
COMPLETE_5          1230
COMPLETE_6          126E
COMPLETE_7          12AC
COMPLETE_8          12EA
COMPLETE_9          1328
DECODEADD           11B6
DECODEAND           12EC
DECODEASX_M         13E4
DECODEASX_R         1422
DECODEBEQ           1460
DECODEBGE           149E
DECODEBLT           14DC
DECODEBRA           1596
DECODEDIVU          1270
DECODEJSR           151A
DECODELEA           12AE
DECODELSX_M         1368
DECODELSX_R         13A6
DECODEMOVE          113A
DECODEMOVEM         1178
DECODEMULS          1232
DECODENOP           10FC
DECODENOT           132A
DECODERTS           1558
DECODESUB           11F4
IDENTIFYOPCODE      1012
LOOP_1              1106
LOOP_10             1334
LOOP_11             1372
LOOP_12             13B0
LOOP_13             13EE
LOOP_14             142C
LOOP_15             146A
LOOP_16             14A8
LOOP_17             14E6
LOOP_18             1524
LOOP_19             1562
LOOP_2              1144
LOOP_20             15A0
LOOP_3              1182
LOOP_4              11C0
LOOP_5              11FE
LOOP_6              123C
LOOP_7              127A
LOOP_8              12B8
LOOP_9              12F6
MAIN                1000
NEXT_1              112A
NEXT_10             1358
NEXT_11             1396
NEXT_12             13D4
NEXT_13             1412
NEXT_14             1450
NEXT_15             148E
NEXT_16             14CC
NEXT_17             150A
NEXT_18             1548
NEXT_19             1586
NEXT_2              1168
NEXT_20             15C4
NEXT_3              11A6
NEXT_4              11E4
NEXT_5              1222
NEXT_6              1260
NEXT_7              129E
NEXT_8              12DC
NEXT_9              131A
OUTPUTDATA          15D4
PADD                33
PAND                88
PASX_M              CC
PASX_R              DD
PBEQ                EE
PBGE                FF
PBLT                110
PBRA                143
PDIVU               66
PJSR                121
PLEA                77
PLSX_M              AA
PLSX_R              BB
PMOVE               11
PMOVEM              22
PMULS               55
PNOP                0
PNOT                99
PRTS                132
PSUB                44
REGSHIFT            10F0
SPLIT0              1020
SPLIT01             102C
SPLIT0100           1038
SPLIT0100111        1054
SPLIT0110           1068
SPLIT01100          1074
SPLIT01101          1080
SPLIT1              108C
SPLIT10             1098
SPLIT11             10A4
SPLIT110            10B0
SPLIT111            10D4
VERIFYOPCODE        0
